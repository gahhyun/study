@Repository 
- 어노테이션은 스프링 프레임워크에서 데이터 액세스 계층의 구현체를 식별하기 위해 사용됩니다. 
- DAO(Data Access Object)의 역할을 수행하는 클래스에 @Repository 어노테이션을 지정하면, 해당 클래스의 메서드에서 발생하는 예외를 스프링의 데이터 액세스 예외로 처리할 수 있습니다.
- @Repository 주석은 클래스가 객체에 대한 저장, 검색, 검색, 업데이트 및 삭제 작업을 위한 메커니즘을 제공함
- @Repository는 DAO의 메서드에서 발생할 수 있는 unchecked exception들을 스프링의 DataAccessException으로 처리할 수 있기 때문이다.
- @Repository 어노테이션은 DAO 클래스에서 발생할 수 있는 예외를 DataAccessException으로 처리하기 위해 사용됩니다. 
- 이를 통해 스프링은 데이터 액세스 예외를 일관된 방식으로 처리하고, 예외 상황에 대한 롤백이나 오류 처리 등을 수행할 수 있습니다.

**************************************************************************************************************************************************
@RequestMapping
- 스프링 프레임워크에서 HTTP 요청과 매핑되는 핸들러 메서드(컨트롤러 메서드)를 지정하기 위해 사용되는 어노테이션
- 컨트롤러 클래스에 @RequestMapping을 사용하면 해당 클래스의 모든 핸들러 메서드에 공통된 URL 매핑을 적용할 수 있습니다.
- 예를 들어, 다음과 같이 클래스에 @RequestMapping을 적용하면 클래스의 모든 핸들러 메서드는 "/users" 경로 아래에 매핑됩니다
    (@Controller
    @RequestMapping("/users")
    public class UserController {

    })

- 메서드 레벨에서 @RequestMapping을 사용하면 해당 메서드가 특정 URL 경로와 매핑되도록 지정할 수 있습니다
- 예를 들어, 다음과 같이 메서드에 @RequestMapping을 적용하면 해당 메서드는 "/users/{id}" 경로와 매핑됩니다
    @Controller
    @RequestMapping("/users")
    public class UserController {
        
        @RequestMapping("/{id}")
        public String getUser(@PathVariable("id") Long userId) {

        }
    }

- @RequestMapping 어노테이션은 다양한 속성
    1) value 또는 path: 매핑될 URL 경로를 지정합니다
    2) method: 허용되는 HTTP 요청 메서드를 지정합니다. 기본적으로 모든 HTTP 메서드에 대해 매핑됩니다.
    3) params: 요청 파라미터의 존재 여부나 값에 따라 매핑을 제한할 수 있습니다.
    4) headers: 요청 헤더의 존재 여부나 값에 따라 매핑을 제한할 수 있습니다.
    5) consumes: 요청의 Content-Type을 기반으로 매핑을 제한할 수 있습니다.
    6) produces: 응답의 Content-Type을 기반으로 매핑을 제한할 수 있습니다.

- 예를 들어, 다음은 HTTP GET 메서드와 "/users/{id}" 경로, "Accept: application/json" 헤더를 가진 요청에 대해 매핑되는 핸들러 메서드를 정의하는 예입니다:
    @Controller
    @RequestMapping(value = "/users/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    public String getUser(@PathVariable("id") Long userId) {
                        //`value` 속성에 "/users/{id}"를 지정하여 "/users/" 다음에 경로 변수인 `id`가 올 수 있음을 나타냅니다. 
                        //`@PathVariable("id")` 어노테이션을 이용하여 `id` 변수를 메서드 매개변수로 정의했습니다. 이렇게 하면 요청 URL에서 경로 변수를 추출하여 메서드에서 사용할 수 있습니다.
    }
        

**************************************************************************************************************************************************
@Autowired
- 스프링 프레임워크에서 의존성 주입(Dependency Injection)을 수행하기 위해 사용되는 어노테이션입니다. 
- @Autowired 어노테이션을 사용하면 스프링은 해당 필드, 생성자 또는 메서드 파라미터에 해당하는 빈(Bean) 객체를 자동으로 주입해줍니다.
- 기본적으로 타입(Type)에 의한 의존성 주입을 수행합니다. 같은 타입의 빈이 여러 개 존재할 경우, 스프링은 해당 타입의 빈을 찾아서 주입합니다. 
- 만약 여러 개의 빈 중에서 특정 빈을 선택하고 싶을 경우, @Qualifier 어노테이션을 함께 사용하여 빈의 이름을 명시할 수 있습니다.

































